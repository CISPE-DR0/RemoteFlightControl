@rendermode @(RenderMode.InteractiveServer)

<div class="telemetry-dashboard">

    <section class="system-status">
        <h3>System Status</h3>
        <div>Ping: @(Ping.TotalMilliseconds) ms</div>
        @if(Status is not null)
        {
            <div>Flight Mode: @Status.FlightModeFlags</div>
            <div>Sensors: @Status.Sensors</div>
            <div>CPU Temp: @(Status.CPU_Temperature / 10.0) °C</div>
            <div>System Load: @Status.SystemLoad / 100 %</div>
        }
    </section>

    <section class="attitude">
        <h3>Attitude</h3>
        @if(Attitude is not null)
        {
            <div>Roll: @(Attitude.Roll / 10).@Math.Abs(Attitude.Roll % 10) °</div>
            <div>Pitch: @(Attitude.Pitch / 10).@Math.Abs(Attitude.Pitch % 10) °</div>
            <div>Yaw: @(Attitude.Yaw) °</div>
        }
    </section>

    <section class="altitude">
        <h3>Altitude</h3>
        @if(Altitude is not null)
        {
            <div>Altitude: @Altitude.Altitude cm</div>
            <div>Variance: @Altitude.Variance cm/s</div>
        }
    </section>

    <section class="battery">
        <h3>Battery</h3>
        @if(Analog is not null)
        {
            <div>Voltage: @Analog.Voltage V</div>
            <div>Amperage: @Analog.Amperage A</div>
            <div>mAh Drawn: @Analog.mAhDrawn mAh</div>
            <div>RSSI: @Analog.RSSI</div>
        }
    </section>

    <section class="gps">
        <h3>GPS</h3>
        @if(RawGPS is not null)
        {
            <div>Fix: @RawGPS.Fix</div>
            <div>Satellites: @RawGPS.Satellites</div>
            <div>Lat: @RawGPS.Latitude / 10^7</div>
            <div>Lon: @RawGPS.Longitude / 10^7</div>
            <div>Altitude: @RawGPS.Altitude cm</div>
            <div>Ground Speed: @RawGPS.GroundSpeed cm/s</div>
            <div>Course: @RawGPS.GroundCourse °</div>
            <div>PDOP: @RawGPS.PDOP</div>
        }
    </section>

    <section class="motors">
        <h3>Motors</h3>
        @if(Motor is not null)
        {
            <div>Motor 1: @Motor.Motor1</div>
            <div>Motor 2: @Motor.Motor2</div>
            <div>Motor 3: @Motor.Motor3</div>
            <div>Motor 4: @Motor.Motor4</div>
            <div>Motor 5: @Motor.Motor5</div>
            <div>Motor 6: @Motor.Motor6</div>
            <div>Motor 7: @Motor.Motor7</div>
            <div>Motor 8: @Motor.Motor8</div>
        }
    </section>

    <section class="imu">
        <h3>IMU</h3>
        @if(RawImu is not null)
        {
            <div>AccelerationX: @(RawImu.AccelerationX)</div>
            <div>AccelerationY: @(RawImu.AccelerationY)</div>
            <div>AccelerationZ: @(RawImu.AccelerationZ)</div>
            <div>GyroscopeX: @(RawImu.GyroscopeX)</div>
            <div>GyroscopeY: @(RawImu.GyroscopeY)</div>
            <div>GyroscopeZ: @(RawImu.GyroscopeZ)</div>
            <div>MagnitudeX: @(RawImu.MagnitudeX)</div>
            <div>MagnitudeY: @(RawImu.MagnitudeY)</div>
            <div>MagnitudeZ: @(RawImu.MagnitudeZ)</div>
        }
    </section>
</div>

@code {
    private MSP_MQTT_Client? MSP_MQTT_Client { get; set; }
    private TimeSpan Ping { get; set; } = TimeSpan.Zero;

    private MSP_Response_Status? Status { get; set; }
    private MSP_Response_Attitude? Attitude { get; set; }
    private MSP_Response_Altitude? Altitude { get; set; }
    private MSP_Response_Analog? Analog { get; set; }
    private MSP_Response_RawGPS? RawGPS { get; set; }
    private MSP_Response_Motor? Motor { get; set; }
    private MSP_Response_RawImu? RawImu { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MSP_MQTT_Client = await MSP_MQTT_Client.CreateAndConnectAsync(new MqttClientFactory());
        _ = Task.Run(MSP_MQTT_Client.SendLoop);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            StartTelemetryLoop(MSP_Command.STATUS, response => Status = response as MSP_Response_Status);
            StartTelemetryLoop(MSP_Command.ATTITUDE, response => Attitude = response as MSP_Response_Attitude);
            StartTelemetryLoop(MSP_Command.ALTITUDE, response => Altitude = response as MSP_Response_Altitude);
            StartTelemetryLoop(MSP_Command.ANALOG, response => Analog = response as MSP_Response_Analog);
            StartTelemetryLoop(MSP_Command.RAW_GPS, response => RawGPS = response as MSP_Response_RawGPS);
            StartTelemetryLoop(MSP_Command.MOTOR, response => Motor = response as MSP_Response_Motor);
            StartTelemetryLoop(MSP_Command.RAW_IMU, response => RawImu = response as MSP_Response_RawImu);
        }
    }

    private void StartTelemetryLoop(MSP_Command command, Action<IMSP_Response?> assignAction)
    {
        new Thread(async delegate ()
        {
            while(true)
            {
                long timestamp = System.Diagnostics.Stopwatch.GetTimestamp();
                IMSP_Request request = IMSP_Request.Create(command);
                var response = await (MSP_MQTT_Client?.SendAsync(request) ?? Task.FromResult<IMSP_Response?>(null));
                Ping = System.Diagnostics.Stopwatch.GetElapsedTime(timestamp);
                assignAction(response);
                await InvokeAsync(StateHasChanged);
                Thread.Sleep(100); // refresh rate
            }
        }).Start();
    }
}